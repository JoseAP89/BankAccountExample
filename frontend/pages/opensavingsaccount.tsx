import type { NextPage } from 'next'
import Head from 'next/head'
import { Alert, AlertIcon, Heading } from '@chakra-ui/react'
import { useForm } from "react-hook-form";
import Account from '../models/account';
import TransactionService from '../services/transaction'

//import {CheckCircleIcon} from '@chakra-ui/icons'

import { useEffect, useState } from 'react'
import { Container, FormControl,FormLabel,Input,FormHelperText,
  Button, FormErrorMessage
} from '@chakra-ui/react'


const OpenSavingsAccount: NextPage = () => {
  const [successMsg, setSuccessMsg] = useState<boolean>(false);
  const [errorMsg, setErrorMsg] = useState<boolean>(false);
  const { register, handleSubmit, formState: { errors } } = useForm();

  const onSubmit = (data: any) => {
    let account : Account = {
      accountid : Number(data.accountid),
      clientid : Number(data.clientid),
      totalamount : Number(data.amount),
    }
    TransactionService.createAccount(account).then( (response) => {
      console.log(response);
      if (!!response && response.statusText === 'Created') {
        setSuccessMsg(true);
        setTimeout(() => {
          setSuccessMsg(false);
        }, 1000 * 5);
      }
    }).catch( err =>{
      console.log(err);
      setErrorMsg(true);
      setTimeout(() => {
        setErrorMsg(false);
      }, 1000 * 5);
    })
    
  };

  return (
    <>
      <Head>
        <title>Cuenta</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      

      <Container p={5} maxW='container.xl'>
        <Heading as="h2" size="md">Crea una cuenta de ahorro en unos pocos pasos.</Heading>

        <p>Como requisito se necesita ser cliente de la institucion.</p>
        <p>Si aun no lo eres <a style={{color:"blue"}} href="/signup">click aqui</a> para volverte nuestro cliente.</p>

        <form onSubmit={handleSubmit(onSubmit)}>
          <FormControl mt={4}  >

            <FormLabel htmlFor='clientid'>Número de Identificación</FormLabel>
            <Input id='clientid' type='number'  w="45vw" 
              {...register("clientid", { required: true, pattern: /^[0-9]+$/i })}
            />
            {!!errors?.clientid  && errors.clientid.type==="pattern" &&
              <div className="error-message">Número de id solo debe tener valores numericos enteros.</div>
            }
            {!!errors?.clientid  && errors.clientid.type==="required" &&
              <div className="error-message">Número de id es requerido.</div>
            }
            <FormHelperText>Número proporcionado por su ejecutivo de cuenta al volverse cliente.</FormHelperText>


            <FormLabel mt={4} htmlFor='accountid'>Número de cuenta</FormLabel>
            <Input id='accountid' type='number'  w="45vw" 
              {...register("accountid", { required: true, pattern: /^[0-9]+$/i })}
            />
            {!!errors?.accountid  && errors.accountid.type==="pattern" &&
              <div className="error-message">Número de cuenta solo debe tener valores numericos enteros.</div>
            }
            {!!errors?.accountid  && errors.accountid.type==="required" &&
              <div className="error-message">Número de cuenta es requerido.</div>
            }
            <FormHelperText>Número proporcionado por su ejecutivo de cuenta.</FormHelperText>


            <FormLabel htmlFor='amount' mt={4}>Monto inicial de apertura</FormLabel>
            <Input id='amount' type='number' w="45vw"
              {...register("amount", { required: true, min: 100 , max: 20_000})}
            />
            {!!errors?.amount  && errors.amount.type=="required" &&
              <div className="error-message">Monto es requerido.</div>
            }
            {!!errors?.amount  && (errors.amount.type==="min" || errors.amount.type==="max")&&
              <div className="error-message">Monto  debe ser mayor o igual a $100 y menor o igual $20,000 MN.</div>
            }
            <FormHelperText>Monto de apertura de la cuenta de ahorros.</FormHelperText>

            <Button colorScheme='blue' my={3} type="submit">Enviar</Button>
          </FormControl>
        </form>

        { successMsg &&
          <Alert status='success'>
            <AlertIcon />
            Datos guardados correctamente.
          </Alert>
        }
        { errorMsg &&
          <Alert status='error'>
            <AlertIcon />
            Hubo un problema guardando su información.
          </Alert>
        }

      </Container>

    </>
  )
}

export default OpenSavingsAccount
