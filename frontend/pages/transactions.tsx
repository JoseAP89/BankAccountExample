import type { NextPage } from 'next'
import Head from 'next/head'
import { Heading } from '@chakra-ui/react'
import { useForm } from "react-hook-form";

//import {CheckCircleIcon} from '@chakra-ui/icons'

import { useEffect, useState } from 'react'
import { Container, FormControl,FormLabel,Input,FormHelperText,
  Button, FormErrorMessage,Tabs, TabPanels, TabPanel, TabList, Tab
} from '@chakra-ui/react'


const Transactions: NextPage = () => {
  // D paradepositos & R para retiros & M para movimientos
  const { register: registerR, handleSubmit: handleSubmitR, formState: { errors: errorsR } } = useForm();
  const { register: registerD, handleSubmit: handleSubmitD, formState: { errors: errorsD } } = useForm();
  const { register: registerM, handleSubmit: handleSubmitM, formState: { errors: errorsM } } = useForm();


  const onSubmitR = (data) => {
    console.log(JSON.stringify(data));
    
  };
  const onSubmitD = (data) => { 
    console.log(JSON.stringify(data));
    
  };
  const onSubmitM = (data) => { 
    console.log(JSON.stringify(data));
    
  };

  console.log("Err Depositos: ",errorsD);
  console.log("Err Retiros: ",errorsR);
  console.log("Err Movimientos: ",errorsM);

  return (
    <>
      <Head>
        <title>Transacciones</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      

      <Container p={5} maxW='container.xl'>

        <Tabs variant='soft-rounded' colorScheme='green'>
          <TabList>
            <Tab>Depósitos</Tab>
            <Tab>Retiro</Tab>
            <Tab>Movimientos</Tab>
          </TabList>
          <TabPanels>

            <TabPanel>
              <Heading as="h2" size="md">Deposita a tu cuenta hasta por $20,000 MN de forma efectiva.</Heading>

              <form onSubmit={handleSubmitD(onSubmitD)}>
                <FormControl mt={4}  >

                  <FormLabel htmlFor='accountD'>Número de cuenta</FormLabel>
                  <Input id='accountD' type='number'  w="45vw" 
                    {...registerD("account", { required: true, pattern: /^[0-9]+$/i })}
                  />
                  {!!errorsD?.account  && errorsD.account.type==="pattern" &&
                    <div className="error-message">Número de cuenta solo debe tener valores numericos enteros.</div>
                  }
                  {!!errorsD?.account  && errorsD.account.type==="required" &&
                    <div className="error-message">Número de cuenta es requerido.</div>
                  }
                  <FormHelperText>Número de su cuenta de ahorros.</FormHelperText>


                  <FormLabel htmlFor='amountD' mt={4}>Monto</FormLabel>
                  <Input id='amountD' type='number' w="45vw"
                    {...registerD("amount", { required: true, max: 20_000 })}
                  />
                  {!!errorsD?.amount  && errorsD.amount.type=="required" &&
                    <div className="error-message">Monto es requerido.</div>
                  }
                  {!!errorsD?.amount  && errorsD.amount.type==="max" &&
                    <div className="error-message">Monto  debe ser menor o igual a $20,000.00 MN.</div>
                  }
                  <FormHelperText>Monto a depositar a tu cuenta de ahorros.</FormHelperText>

                  <Button colorScheme='blue' my={3} type="submit">Enviar</Button>
                </FormControl>
              </form>
            </TabPanel>


            <TabPanel>
              <Heading as="h2" size="md">Retira de tu cuenta hasta $20,000 MN.</Heading>

              <form onSubmit={handleSubmitR(onSubmitD)}>
                <FormControl mt={4}  >

                  <FormLabel htmlFor='accountR'>Número de cuenta</FormLabel>
                  <Input id='accountR' type='number'  w="45vw" 
                    {...registerR("account", { required: true, pattern: /^[0-9]+$/i })}
                  />
                  {!!errorsR?.account  && errorsR.account.type==="pattern" &&
                    <div className="error-message">Número de cuenta solo debe tener valores numericos enteros.</div>
                  }
                  {!!errorsR?.account  && errorsR.account.type==="required" &&
                    <div className="error-message">Número de cuenta es requerido.</div>
                  }
                  <FormHelperText>Número de su cuenta de ahorros.</FormHelperText>


                  <FormLabel htmlFor='amountR' mt={4}>Monto</FormLabel>
                  <Input id='amountR' type='number' w="45vw"
                    {...registerR("amount", { required: true, max: 20_000 })}
                  />
                  {!!errorsR?.amount  && errorsR.amount.type=="required" &&
                    <div className="error-message">Monto es requerido.</div>
                  }
                  {!!errorsR?.amount  && errorsR.amount.type==="max" &&
                    <div className="error-message">Monto  debe ser menor o igual a $20,000.00 MN.</div>
                  }
                  <FormHelperText>Monto a retirar de tu cuenta de ahorros.</FormHelperText>

                  <Button colorScheme='blue' my={3} type="submit">Enviar</Button>
                </FormControl>
              </form>
            </TabPanel>


            <TabPanel>
               <Heading as="h2" size="md">Revisa los movimientos de tu cuenta.</Heading>

              <form onSubmit={handleSubmitM(onSubmitM)}>
                <FormControl mt={4}  >

                  <FormLabel htmlFor='id' mt={4}>Número de Identificación</FormLabel>
                  <Input id='id' type='text' w="45vw"
                    {...registerM("id", { required: true, maxLength: 18 })}
                  />
                  {!!errorsM?.id  && errorsM.id.type=="required" &&
                    <div className="error-message">Id es requerido.</div>
                  }
                  {!!errorsM?.id  && errorsM.id.type==="maxLength" &&
                    <div className="error-message">Id no debe tener más de 18 carácteres.</div>
                  }
                  <FormHelperText>Id proporcionado por su ejecutivo de cuenta.</FormHelperText>


                  <FormLabel htmlFor='account' mt={4}>Número de cuenta</FormLabel>
                  <Input id='account' type='number'  w="45vw" 
                    {...registerM("account", { required: true, pattern: /^[0-9]+$/i })}
                  />
                  {!!errorsM?.account  && errorsM.account.type==="pattern" &&
                    <div className="error-message">Número de cuenta solo debe tener valores numericos enteros.</div>
                  }
                  {!!errorsM?.account  && errorsM.account.type==="required" &&
                    <div className="error-message">Número de cuenta es requerido.</div>
                  }
                  <FormHelperText>Número proporcionado por su ejecutivo de cuenta .</FormHelperText>

                  <Button colorScheme='blue' my={3} type="submit">Enviar</Button>
                </FormControl>
              </form>
            </TabPanel>

          </TabPanels>
        </Tabs>

        
      </Container>

    </>
  )
}

export default Transactions
